// Copyright 2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// Thanks to:
// - h3x3r (https://reshax.com/profile/183-h3x3r/) for providing the BMS script that this is based on.

#ifndef HELLDIVERS2_DATAFILE
#define HELLDIVERS2_DATAFILE

#ifndef IS_INCLUDE
    #define IS_INCLUDE
    #define HELLDIVERS2_DATAFILE_INCLUDE
#endif
#include "common.bt"
#ifdef HELLDIVERS2_DATAFILE_INCLUDE
    #undef IS_INCLUDE
#endif

struct datafile_t {
	BigEndian();
    uint32_t magic_number <format=hex>;
	LittleEndian();
    uint32_t types <format=decimal>;
    uint32_t files <format=decimal>;
    
	uint32_t __unk <format=decimal>;
	BigEndian();
	uint32_t __unk <format=hex>; // This tends to be the same in files containing the same files.
	LittleEndian();
	uint32_t __unk <format=hex>;
	BigEndian();
	uint32_t __unk <format=hex>; // But this is different every time.
	uint32_t __unk <format=hex>; // But this is different every time.
	LittleEndian();
	uint32_t size_rounded_unk <format=decimal>; // Size of the file itself. But it's always either smaller or larger by a lot.
	uint32_t __unk <format=hex>;
	uint32_t gpu_resources_size_aligned_256B <format=decimal>; // Size of (.gpu_resources) aligned to the next larger 256b block.
	
    // 2D54A00
    // 2C89000
    // 2D54A00
    
    uint8_t __unk1[7*4] <format=hex>;
	LittleEndian();
    
    struct type_t {
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
		BigEndian();
        uint64_t type <format=hex>;
		LittleEndian();
        uint32_t total; // Seems to be the total amount of files using this type. Why is this needed?
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>; // always 0x10
        uint32_t __unk <format=hex>; // always 0x40
    } type[types];
        
    struct file_t {
        BigEndian();
        uint64_t id <format=hex>;
        uint64_t type <format=hex>;
        LittleEndian();
        uint64_t offset <format=decimal>;
        uint64_t stream_offset <format=decimal>;
        uint64_t gpu_resources_offset <format=decimal>;
        uint64_t read_offset <format=decimal>; // Seems to always smaller than offset by a random amount?
        uint64_t gpu_resources_read_offset <format=decimal>; // Seems to always be larger than gpu_resources_offset by exactly 256B?
        uint32_t size <format=decimal>;
        uint32_t stream_size <format=decimal>;
        uint32_t gpu_resources_size <format=decimal>;
        uint32_t alignment <format=decimal>;
        uint32_t gpu_resources_alignment <format=decimal>;
        uint32_t index <format=decimal>;
    } file[files];
    
    struct {
        local uint i;
        for (i = 0; i < files; i++) {
            FSeek(file[i].offset);
            struct {
                char _[file[i].size];
                // This is the weirdest format I've encountered, and I don't understand the rules.
                // 
                /* Any DDS file appears to have 0xC0 prefix size.
                */
                /* WWise Sound Banks
                    74 2F 76 78 8D 86 0F 00 62 88 B5 0D 9C 9F 9D 35
                */
                /* TrueType Font with 16MB size:
                    EE 8A C3 3B 38 46 B8 74 87 88 08 C0 8B 88 88 3F
                    3F 00 00 00 00 00 00 00 69 FB CF 7A 07 EB 33 C0
                    05 00 00 00 28 00 00 00 00 40 5B 44 00 80 BA C3
                    00 40 9C 44 80 00 00 00 00 40 5F 44 00 00 FE C2
                    00 00 FF 44 D0 F2 00 00 00 C0 71 44 00 00 7D C3
                    00 80 98 44 E0 3C 2C 00 00 80 6D 44 00 00 75 C3
                    00 60 95 44 70 20 93 00 00 00 61 44 00 00 7A C3
                    00 C0 8F 44 50 76 CA 00 00 00 00 00 00 00 00 00
                */
                /* TrueType Font with 4MB size
                    C0 E7 1D 12 3C 53 27 53 87 88 08 C0 8B 88 88 3F
                    3F 00 00 00 00 00 00 00 CC E8 77 49 D4 BD 15 22
                    01 00 00 00 28 00 00 00 00 40 5B 44 00 80 BA C3
                    00 40 9C 44 40 00 00 00 00 00 00 00 00 00 00 00
                 */
                /* TrueType Font with 4MB size
                    7A 39 D7 8B 42 6B 14 D2 00 00 00 00 00 00 80 3F
                    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
                    00 00 00 00 28 00 00 00
                 */
            } entry;
        }
    } data;
} DataFile;

#endif
